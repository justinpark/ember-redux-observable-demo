<div class="row">
  {{#containers/user-container as |user actions|}}
    {{#if user.loading }}
      Loading...
    {{else}}
      <div class="card">
        <div class="card-content">
          <ul>
            <li>
              user.loading: <strong>{{user.loading}}</strong>
            </li>
            <li>
              user.loaded: <strong>{{user.loaded}}</strong>
            </li>
            <li>
              user.list: <strong>{{user.list}}</strong>
            </li>
          </ul>
        </div>
        <div class="card-action">
          <button class="btn" {{action actions.onRequest}}>
            Set Request
          </button>
        </div>
      </div>
    {{/if}}
  {{/containers/user-container}}


  <h4>Installation</h4>

  {{#code-block language="bash"}}
> npm install rxjs
> npm install redux-observable{{/code-block}}

  <h4>Setup RxJS</h4>
  {{#code-block language="javascript"}}
/* app/app.js */
import 'npm:rxjs/Rx';
...
{{/code-block}}

  <h4>Setup Epics</h4>

  {{#code-block language="javascript"}}
/* app/epics/index.js */
import ReduxObservable from 'npm:redux-observable';
import userEpic from './user/read';

const { combineEpics } = ReduxObservable;

export default combineEpics(userEpic);
{{/code-block}}

  <h4>Configure an epic for an action</h4>
  {{#code-block language="javascript"}}
/* app/epics/user/read.js */
import npmObservable from 'npm:rxjs/Observable';
import { ActionTypes, Actions} from 'ember-redux-observable-demo/actions/user';
import npmAjax from 'npm:rxjs/observable/dom/ajax';

const { Observable } = npmObservable;
const { ajax } = npmAjax;

function fetchAPI(url) {
  return ajax({ url });
}

export default (action$) => action$
  .ofType(ActionTypes.REQUEST_READ)
  .map(action => action.payload)
  .switchMap(payload =>
    Observable.merge(
      Observable.of(Actions.loading()),
      fetchAPI('/api/users')
        .map(ajaxRes => ajaxRes.response.data)
        .mergeMap(user => Observable.of(Actions.loadUser({ user })))
        .catch(() => Observable.of(Actions.requestFail()))
    )
  )
{{/code-block}}

  <h4>Setup redux-observable</h4>

  {{#code-block language="javascript"}}
/* app/middleware/index.js */
import ReduxObservable from 'npm:redux-observable';
import rootEpic from 'ember-redux-observable-demo/epics';

const { createEpicMiddleware } = ReduxObservable;
const epicMiddleware = createEpicMiddleware(rootEpic);

export default [epicMiddleware];
{{/code-block}}

</div>
